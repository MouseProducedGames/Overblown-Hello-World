# OVerblown Hello World

## What's the point of writing an overblown 'Hello World'?

Surprisingly practical, for certain cases.

So let's say you want to make an application, but you're just starting out. At a high level, what does your application look like? Well, if you're like me, your first real code is probably a list of commands all placed inside main().

So, while the title is "OVerblown Hello World", this is really a very simple example of basic application structure.

## Ok, but why write it in C?

C is, overall, a very simple language *at this level*. Thus, the code in this project should be convertable to *most* programming paradigms.

It is not a good fit for: Functional programming, pure procedural programming.

## How did you lay out the files?

* All external application functions are prototyped in app.h.
* Application functions related to running the app are in app.c.
* Application data and functions that directly manipulate that data are in app_data.c. This isolates direct data manipulation from the application proper.
* build.sh is a very simple, one-line gcc build script. It's mostly there for convenience.
* Functions related to the console go in console.c/h. We don't use printf() directly, as the console (in a real application) may be graphical, 2D, 3D, over a network, audio/voice, brail, or any others I haven't thought of.
* Data constants goes into data.c/h.
* hello.c starts and runs the application. In a real application, it should also call application_shutdown(), but there's nothing to shutdown.

